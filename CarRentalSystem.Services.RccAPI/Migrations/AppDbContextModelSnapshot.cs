// <auto-generated />
using System;
using CarRentalSystem.Services.RccAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarRentalSystem.Services.RccAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CarRentalSystem.Services.RccAPI.Models.CarDB", b =>
                {
                    b.Property<int>("CardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CardId"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PricePerDay")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CardId");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            CardId = 1,
                            Brand = "Toyota",
                            IsAvailable = true,
                            Model = "Corolla",
                            PricePerDay = "50",
                            Type = "Small"
                        },
                        new
                        {
                            CardId = 2,
                            Brand = "Honda",
                            IsAvailable = true,
                            Model = "Civic",
                            PricePerDay = "50",
                            Type = "Small"
                        },
                        new
                        {
                            CardId = 3,
                            Brand = "Ford",
                            IsAvailable = true,
                            Model = "Explorer",
                            PricePerDay = "150",
                            Type = "SUV"
                        },
                        new
                        {
                            CardId = 4,
                            Brand = "Jeep",
                            IsAvailable = true,
                            Model = "Grand Cherokee",
                            PricePerDay = "150",
                            Type = "SUV"
                        },
                        new
                        {
                            CardId = 5,
                            Brand = "BMW",
                            IsAvailable = true,
                            Model = "X5",
                            PricePerDay = "300",
                            Type = "Premium"
                        },
                        new
                        {
                            CardId = 6,
                            Brand = "Audi",
                            IsAvailable = true,
                            Model = "A8",
                            PricePerDay = "300",
                            Type = "Premium"
                        },
                        new
                        {
                            CardId = 7,
                            Brand = "Mercedes",
                            IsAvailable = true,
                            Model = "C-Class",
                            PricePerDay = "300",
                            Type = "Premium"
                        },
                        new
                        {
                            CardId = 8,
                            Brand = "Hyundai",
                            IsAvailable = true,
                            Model = "Elantra",
                            PricePerDay = "50",
                            Type = "Small"
                        },
                        new
                        {
                            CardId = 9,
                            Brand = "Kia",
                            IsAvailable = true,
                            Model = "Sorento",
                            PricePerDay = "150",
                            Type = "SUV"
                        },
                        new
                        {
                            CardId = 10,
                            Brand = "Lexus",
                            IsAvailable = true,
                            Model = "RX",
                            PricePerDay = "300",
                            Type = "Premium"
                        });
                });

            modelBuilder.Entity("CarRentalSystem.Services.RccAPI.Models.CustomerDB", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<int>("LoyaltyPoints")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            LoyaltyPoints = 10,
                            Name = "John Doe"
                        },
                        new
                        {
                            CustomerId = 2,
                            LoyaltyPoints = 20,
                            Name = "Jane Smith"
                        },
                        new
                        {
                            CustomerId = 3,
                            LoyaltyPoints = 15,
                            Name = "Robert Johnson"
                        },
                        new
                        {
                            CustomerId = 4,
                            LoyaltyPoints = 25,
                            Name = "Emily Davis"
                        },
                        new
                        {
                            CustomerId = 5,
                            LoyaltyPoints = 30,
                            Name = "Michael Williams"
                        },
                        new
                        {
                            CustomerId = 6,
                            LoyaltyPoints = 35,
                            Name = "Sarah Brown"
                        },
                        new
                        {
                            CustomerId = 7,
                            LoyaltyPoints = 40,
                            Name = "David Jones"
                        },
                        new
                        {
                            CustomerId = 8,
                            LoyaltyPoints = 50,
                            Name = "Linda Garcia"
                        },
                        new
                        {
                            CustomerId = 9,
                            LoyaltyPoints = 60,
                            Name = "James Miller"
                        },
                        new
                        {
                            CustomerId = 10,
                            LoyaltyPoints = 70,
                            Name = "Patricia Martinez"
                        });
                });

            modelBuilder.Entity("CarRentalSystem.Services.RccAPI.Models.RentalDB", b =>
                {
                    b.Property<int>("RentalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RentalId"));

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<string>("CarType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("ExtraDays")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Price")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RentalDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TotalPrice")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RentalId");

                    b.HasIndex("CarId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Rentals");
                });

            modelBuilder.Entity("CarRentalSystem.Services.RccAPI.Models.RentalDB", b =>
                {
                    b.HasOne("CarRentalSystem.Services.RccAPI.Models.CarDB", "Car")
                        .WithMany("Rentals")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRentalSystem.Services.RccAPI.Models.CustomerDB", "Customer")
                        .WithMany("Rentals")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CarRentalSystem.Services.RccAPI.Models.CarDB", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("CarRentalSystem.Services.RccAPI.Models.CustomerDB", b =>
                {
                    b.Navigation("Rentals");
                });
#pragma warning restore 612, 618
        }
    }
}
